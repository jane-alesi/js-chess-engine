# JS Chess Engine - Development Context

**Pure JavaScript chess engine inspired by Atari Video Chess, designed to enable LLMs to outplay the original Atari 2600 version through superior chess logic and AI.**

## 🎯 **PROJECT OBJECTIVES**

### **Core Goals**
- **Pure JavaScript Implementation** - Complete chess logic without external libraries
- **Advanced AI Engine** - Minimax with Alpha-Beta Pruning for intelligent gameplay
- **LLM Integration Ready** - Engine designed for AI agents to understand strategies and generate moves
- **Production Quality** - Modular, maintainable, performant codebase

### **Development Philosophy**
- **Issue-Driven Development** - All work tracked through GitHub Issues
- **Modular Architecture** - Core, UI, AI, Utils components with incremental development
- **AI-First Design** - Optimized for LLM collaboration and code generation

**Repository:** https://github.com/jane-alesi/js-chess-engine

---

## 🏆 **CURRENT PROJECT STATUS (June 2025)**

### **✅ Completed Components**
- **Core Infrastructure**: Board.js, Piece.js (ES2022 private fields), Game.js, GameState.js
- **UI Foundation**: BoardRenderer.js, InputHandler.js, styles.css
- **Utilities**: Constants.js with comprehensive piece definitions and helper functions
- **Move Generation**: **Pawn moves fully implemented** (Issue #4 ✅)
- **Testing Framework**: Jest configuration with ES module support
- **Security**: Comprehensive dependency security fixes and npm overrides

### **🧪 Test Suite Status**
- **All 21 tests passing** ✅
- **Comprehensive pawn move generation tests** with edge cases
- **Jest configuration modernized** for Node.js compatibility
- **Test compatibility verified** with ES2022 private fields

### **🔧 Recent Critical Fixes**
- **Jest Configuration**: Removed deprecated `--harmony-private-fields` flag
- **Test Cases**: Fixed board wrapping validation logic
- **Security**: Updated all vulnerable dependencies with npm overrides
- **ESLint**: Modern flat config format with ES2022 support

---

## ⚡ **CRITICAL WORKFLOWS**

### **🔧 File Update Protocol (MANDATORY)**
```javascript
// ALWAYS follow this exact sequence
const fileData = await get_file_contents(owner, repo, path);
const currentSHA = fileData.sha;
await create_or_update_file(owner, repo, path, content, message, branch, currentSHA);
```

### **🧠 Cortex Memory System Protocol**

**CRITICAL**: The `read_graph` function requires specific parameter structure for correct initialization:

```javascript
// ✅ CORRECT: Use explicit parameter structure
read_graph({"properties": {}})

// ❌ INCORRECT: Will cause "Invalid JSON format" error
read_graph()
read_graph({})
```

**Initialization Sequence:**
1. Always attempt cortex initialization at conversation start
2. Use exact JSON parameter structure to prevent parsing errors
3. Implement fallback strategies for initialization failures
4. Verify successful memory integration before proceeding

### **🔧 GitHub File Update Protocol (Enhanced)**

**CRITICAL**: When updating EXISTING files, ALWAYS provide the SHA to prevent 422 errors:

```javascript
// ✅ CORRECT: SHA-based update sequence
const fileData = await get_file_contents(owner, repo, path);
const currentSHA = fileData.sha;
await create_or_update_file(owner, repo, path, content, message, branch, currentSHA);

// ❌ INCORRECT: Missing SHA causes error
// Error: MCP plugin run error: Failed to call tool: {"error":"Failed to call tool","details":"MCP error -32603: failed to create/update file: PUT https://api.github.com/repos/jane-alesi/js-chess-engine/contents/FILE_TO_UPDATE: 422 Invalid request.\\n\\n\\"sha\\" wasn't supplied. []"}
```

**Update Workflow:**
1. Get current file contents and SHA using `get_file_contents`
2. Extract SHA from response: `const currentSHA = fileData.sha`
3. Include SHA in `create_or_update_file` call as final parameter
4. Verify successful update completion

### **🧪 Jest Test Execution (UPDATED 2025)**
```bash
# ✅ CORRECT: Modern Jest configuration
npm test

# Test scripts (package.json):
"test": "node --experimental-vm-modules --no-warnings node_modules/jest/bin/jest.js"
"test:watch": "node --experimental-vm-modules --no-warnings node_modules/jest/bin/jest.js --watch"
"test:coverage": "node --experimental-vm-modules --no-warnings node_modules/jest/bin/jest.js --coverage"

# ❌ DEPRECATED: Do not use --harmony-private-fields (causes errors)
```

### **🧪 Test Compatibility Protocol (MANDATORY)**
```javascript
// When modifying core components with private fields or new APIs:
const testUpdateWorkflow = {
    1: "Identify all dependent test files before making changes",
    2: "Update tests to use getter methods instead of direct property access",
    3: "Run full test suite to verify compatibility",
    4: "Document breaking changes in commit message",
    5: "Update any integration tests that depend on the modified component"
};

// Example: After implementing private fields in Piece.js
// ❌ OLD: expect(piece.type).toBe('pawn');
// ✅ NEW: expect(piece.getType()).toBe('pawn');

// Integration test updates
// ❌ OLD: expect(board.squares[8].color).toBe('white');
// ✅ NEW: expect(board.squares[8].getColor()).toBe('white');
```

### **📝 Move Object Structure (STANDARDIZED)**
```javascript
// Standardized move object format (implemented in Issue #4)
const moveObject = {
    from: 12,              // Source square index (0-63)
    to: 28,                // Destination square index
    type: 'normal',        // 'normal', 'double', 'capture', 'castling', 'enPassant'
    piece: 'pawn',         // Moving piece type
    color: 'white',        // Moving piece color
    captured: 'knight'     // Captured piece type (if any)
};
```

---

## 🛠️ **TECHNICAL STANDARDS (2025)**

### **JavaScript/ES2022**
```javascript
// ✅ Modern class fields syntax with private fields
class ChessEngine {
    static PIECE_TYPES = ['pawn', 'rook', 'knight', 'bishop', 'queen', 'king'];

    // Private fields for encapsulation
    #privateField = 'value';
    #gameState;
    #currentPlayer = 'white';

    constructor() {
        this.#gameState = new GameState();
    }

    // Public getter methods for private fields
    getCurrentPlayer() { return this.#currentPlayer; }
    getGameState() { return this.#gameState; }
}

// ✅ Comprehensive input validation with descriptive errors
function validateMove(fromIndex, toIndex) {
    if (typeof fromIndex !== 'number' || fromIndex < 0 || fromIndex >= 64) {
        throw new Error(`Invalid move: fromIndex ${fromIndex} must be 0-63`);
    }
    if (typeof toIndex !== 'number' || toIndex < 0 || toIndex >= 64) {
        throw new Error(`Invalid move: toIndex ${toIndex} must be 0-63`);
    }
}

// ✅ Proper error handling
throw new Error(`Invalid move: ${details}`);  // Not console.warn()

// ✅ Unused parameters
function processMove(_unused, toSquare) { /* ... */ }
```

### **Testing & Quality**
- **Jest Configuration** - ES modules with experimental VM support (NO deprecated flags)
- **ESLint** - Flat config format (not `.eslintrc.json`)
- **Error Handling** - Descriptive exceptions, no console pollution
- **Test Coverage** - All error paths and edge cases validated
- **Test Compatibility** - Update tests when implementing private fields or new APIs

### **File Structure**
```
src/
├── core/          # Chess logic (Board, Piece, Game)
│   ├── Board.js              # ✅ Implemented
│   ├── Piece.js              # ✅ Implemented (ES2022 private fields)
│   ├── Game.js               # ✅ Implemented
│   ├── GameState.js          # ✅ Implemented
│   ├── MoveGenerator.js      # 🔄 Pawn moves implemented, others TODO
│   ├── MoveValidator.js      # ✅ Basic implementation
│   └── Rules.js              # ✅ Basic implementation
├── ui/            # User interface (InputHandler, BoardRenderer)
│   ├── BoardRenderer.js      # ✅ Implemented
│   ├── InputHandler.js       # ✅ Implemented
│   └── styles.css            # ✅ Implemented
├── ai/            # AI engine (Minimax, evaluation)
│   └── [TODO]                # Future implementation
└── utils/         # Utilities (Constants, helpers)
    └── Constants.js          # ✅ Implemented

tests/
├── core/          # Core logic tests
│   ├── Board.test.js         # ✅ Implemented
│   ├── Piece.test.js         # ✅ Implemented
│   └── MoveGenerator.test.js # ✅ Implemented (21 tests passing)
├── ui/            # UI component tests
└── ai/            # AI engine tests
```

---

## 🔍 **DEVELOPMENT BEST PRACTICES**

### **Issue Management**
- **Atomic Issues** - One specific problem per issue
- **Clear Definitions** - Detailed problem description and acceptance criteria
- **Priority Levels** - Critical → High → Medium → Low
- **Progress Tracking** - Regular status updates and completion verification

### **Code Quality Gates**
1. **ESLint passes** without errors or warnings
2. **All tests pass** with 100% success rate
3. **Error handling** uses exceptions, not console output
4. **Documentation** updated for significant changes
5. **Performance** considerations for LLM integration
6. **Test compatibility** verified when modifying core components

### **Integration Testing Protocol**
- **Dependency Mapping** - Before modifying core components, identify all dependent files
- **API Compatibility** - When changing public interfaces, update all consumers
- **Test Cascade** - Run tests for modified component AND all dependent components
- **Breaking Change Documentation** - Clearly document any API changes in commit messages

### **Collaboration Protocol**
- **SHA-based updates** - Always get current SHA before file modifications
- **Verification steps** - Confirm operations completed successfully
- **Error recovery** - Implement retry strategies for tool failures
- **Research validation** - Verify best practices through online research

---

## 🎮 **CHESS ENGINE SPECIFICS**

### **Core Features**
- **64-square board representation** with piece positioning ✅
- **Move validation** with chess rule enforcement (partial)
- **Game state tracking** including check/checkmate detection (basic)
- **Move notation** for game recording and analysis (TODO)

### **Move Generation Status**
- **✅ Pawn Moves**: Fully implemented with comprehensive testing
  - Single forward moves
  - Double moves from starting rank
  - Diagonal captures
  - Board boundary validation
  - Edge case handling
- **🔄 Other Pieces**: TODO (Issues #1, #2, #6, #7, #9)
  - Rook moves (Issue #2) - Recommended next
  - Bishop moves (Issue #1)
  - Knight moves (Issue #9)
  - King moves (Issue #7)
  - Queen moves (Issue #6) - Combines Rook + Bishop

### **AI Integration**
- **Position evaluation** for strategic decision making (TODO)
- **Move generation** with legal move filtering (partial)
- **Search algorithms** optimized for performance (TODO)
- **LLM-friendly APIs** for external AI agent integration (partial)

### **Performance Targets**
- **Sub-second move generation** for responsive gameplay
- **Memory efficient** board representation
- **Scalable architecture** for advanced AI features
- **Web Worker support** for non-blocking computation

---

## 🚀 **NEXT DEVELOPMENT PRIORITIES**

### **Immediate (High Priority)**
1. **Issue #2**: Implement Rook Pseudo-Legal Move Generation
2. **Issue #1**: Implement Bishop Pseudo-Legal Move Generation
3. **Issue #9**: Implement Knight Pseudo-Legal Move Generation
4. **Issue #7**: Implement King Pseudo-Legal Move Generation
5. **Issue #6**: Implement Queen Pseudo-Legal Move Generation

### **Short-term (Medium Priority)**
1. **Issue #15**: Enhance Board.js movePiece for Game Logic
2. **Issue #14**: Orchestrate Game Flow with Game Class (if needed)
3. **Move Validation**: Implement self-check prevention
4. **Check Detection**: Implement check/checkmate logic

### **Long-term (Lower Priority)**
1. **AI Implementation**: Minimax with Alpha-Beta Pruning
2. **Advanced Rules**: Castling, en passant, promotion
3. **UI Enhancements**: Move highlighting, animations
4. **Performance**: Web Workers, transposition tables

---

## 📚 **REFERENCE RESOURCES**

- **Technical Guide** - `llms.txt` (comprehensive development guidelines)
- **Issue Tracker** - GitHub Issues for all development tasks
- **CI/CD Pipeline** - GitHub Actions with automated testing
- **Code Standards** - ESLint flat config with ES2022 support

## 🔧 **TROUBLESHOOTING QUICK REFERENCE**

### **Common Jest Issues**
```bash
# ❌ Error: node: bad option: --harmony-private-fields
# ✅ Solution: Use modern Jest config (already fixed)
npm test

# ❌ Error: Cannot use import statement outside a module
# ✅ Solution: Ensure "type": "module" in package.json (already set)
```

### **Common Test Failures**
```javascript
// ❌ Error: Cannot read private member #field
// ✅ Solution: Use getter methods in tests
expect(piece.getType()).toBe('pawn');  // Not piece.type

// ❌ Error: Board wrapping validation
// ✅ Solution: Use correct wrapping examples (already fixed)
```

**This context provides the essential framework for efficient development while maintaining the chess engine's core objectives and technical excellence.**