# JS Chess Engine - Development Context

**Pure JavaScript chess engine inspired by Atari Video Chess, designed to enable LLMs to outplay the original Atari 2600 version through superior chess logic and AI.**

## üöÄ **PROJECT OBJECTIVES**

### **Core Goals**
- **Pure JavaScript Implementation** - Complete chess logic without external libraries
- **Advanced AI Engine** - Minimax with Alpha-Beta Pruning for intelligent gameplay
- **LLM Integration Ready** - Engine designed for AI agents to understand strategies and generate moves
- **Production Quality** - Modular, maintainable, performant codebase

### **Development Philosophy**
- **Issue-Driven Development** - All work tracked through GitHub Issues
- **Modular Architecture** - Core, UI, AI, Utils components with incremental development
- **AI-First Design** - Optimized for LLM collaboration and code generation
- **üßπ Clean Code Standards** - Self-documenting code without unnecessary comments
- **‚ôüÔ∏è Official Chess Standards** - Strict adherence to standard chess notation and rules

**Repository:** https://github.com/jane-alesi/js-chess-engine

**For comprehensive development guidelines, see `llms.txt` in the repository root.**

---

## üìä **CURRENT PROJECT STATUS (June 2025)**

### **‚úÖ Completed Components**
- **Core Infrastructure**: Board.js, Piece.js (ES2022 private fields), Game.js, GameState.js
- **UI Foundation**: BoardRenderer.js, InputHandler.js, styles.css
- **Utilities**: Constants.js with comprehensive piece definitions and helper functions
- **Move Generation**: **Pawn, Rook, Bishop, Knight, King and Queen moves fully implemented** (Issues #4, #2, #1, #9, #7, #6 ‚úÖ)
- **Enhanced Board Logic**: **Issue #15 COMPLETED** - Enhanced movePiece method with game logic tracking ‚úÖ
- **Testing Framework**: Jest configuration with ES module support
- **Security**: Comprehensive dependency security fixes and npm overrides
- **Automated Linting**: Fully synchronized auto-linting/formatting pipeline (ESLint + Prettier) (Issue #19 ‚úÖ)
- **üìã DOCUMENTATION PHASE COMPLETE**: Professional README.md with comprehensive project documentation (Issues #35-#38 ‚úÖ)

### **üö® CRITICAL STATUS UPDATE (June 11, 2025)**

**‚ö†Ô∏è IMPORTANT DISCOVERY**: Previous documentation claiming "All tests passing ‚úÖ" was **INACCURATE**.

**Actual Test Status:**
- **Total Tests**: 223 tests across all suites
- **Passing Tests**: 219 tests (98.2% success rate)
- **Failing Tests**: 4 tests in MoveValidator.test.js

**üîß CRITICAL FIXES IMPLEMENTED (June 11, 2025):**
- **Enhanced MoveValidator Integration**: Fixed 5 critical integration issues between MoveValidator and MoveGenerator
- **Robust Error Handling**: Added comprehensive try-catch blocks for graceful error handling
- **GameState Integration**: Enhanced turn validation with null safety
- **Checkmate/Stalemate Detection**: Improved algorithms with proper legal move enumeration
- **Self-Check Prevention**: Enhanced validation chain with robust error handling
- **üßπ CODE QUALITY FIXES**: Removed unused error variables entirely following project's strict ESLint standards

### **üß™ Test Suite Status (CORRECTED)**
- **MoveGenerator Tests**: ‚úÖ ALL 52 tests passing (Pawn, Rook, Bishop, Knight, King, Queen)
- **Constants Tests**: ‚úÖ ALL 32 tests passing
- **InputHandler Tests**: ‚úÖ ALL 18 tests passing  
- **Piece Tests**: ‚úÖ ALL 50 tests passing
- **Board Tests**: ‚úÖ ALL 12 tests passing
- **Game Tests**: ‚úÖ ALL 25 tests passing
- **MoveValidator Tests**: üîß **FIXED** - Previously 4 failing tests, now resolved with enhanced integration

### **üéØ PHASE 3 PROGRESS: Enhanced Board Logic & Move Validation**
- **‚úÖ Issue #15 COMPLETED**: Enhanced Board.js movePiece for Game Logic
  - **Enhanced movePiece method** with comprehensive game logic tracking
  - **Piece movement tracking** using `markAsMoved()` method (crucial for castling and pawn rules)
  - **Detailed move result objects** with `from`, `to`, `pieceMoved`, `pieceCaptured`, and `success` status
  - **Backward compatibility** maintained with existing tests
  - **Comprehensive test coverage** for new functionality

- **üîß MoveValidator Integration FIXED**: Enhanced integration with comprehensive error handling
  - **Fixed basic move validation** (pawn move 52 ‚Üí 44)
  - **Enhanced checkmate detection** with proper legal move enumeration
  - **Improved stalemate detection** with edge case handling
  - **Robust GameState integration** with null safety
  - **Comprehensive self-check prevention** with error handling
  - **üßπ Clean Code Implementation**: Removed unused variables entirely following project standards

---

## ‚ö° **CRITICAL WORKFLOWS**

### **üîß File Update Protocol (MANDATORY)**
```javascript
// ALWAYS follow this exact sequence
const fileData = await get_file_contents(owner, repo, path);
const currentSHA = fileData.sha;
await create_or_update_file(owner, repo, path, content, message, branch, currentSHA);
```

### **üß† Cortex Memory System Protocol**

**CRITICAL**: The `read_graph` function requires specific parameter structure for correct initialization:

```javascript
// ‚úÖ CORRECT: Use explicit parameter structure
read_graph({"properties": {}})

// ‚ùå INCORRECT: Will cause "Invalid JSON format" error
read_graph()
read_graph({})
```

**Initialization Sequence:**
1. Always attempt cortex initialization at conversation start
2. Use exact JSON parameter structure to prevent parsing errors
3. Implement fallback strategies for initialization failures
4. Verify successful memory integration before proceeding

### **ü§ñ Automated LLM Code Quality Protocol (ENHANCED)**

**CRITICAL**: The project includes a fully synchronized, automated code quality workflow.

```yaml
# Auto-fix workflow (.github/workflows/auto-fix.yml)
# - Runs before main CI pipeline
# - Automatically formats and fixes ESLint issues
# - Commits fixes back to branch with [auto-fix] tag
# - Prevents CI failures from LLM code generation
```

**LLM Development Workflow:**
1. **Generate Code**: LLMs can generate code without worrying about minor linting or formatting issues
2. **Auto-Fix Triggers**: Push/PR automatically triggers the auto-fix workflow
3. **Automatic Fixes**: Prettier and ESLint are run in the correct order to automatically format and fix the code
4. **Auto-Commit**: Fixed code is committed back to the branch with an `[auto-fix]` message
5. **CI Validation**: The main CI pipeline runs on the *already fixed* code, ensuring a smooth and reliable build

**üßπ CODE QUALITY BEST PRACTICES (CRITICAL):**
- **Remove unused variables entirely** - Never introduce unused variables, they are useless clutter
- **Follow .eslintrc.json standards strictly** - Project has strict no-unused-vars rule
- **Use parameterless catch blocks** when error details aren't needed: `catch { ... }` instead of `catch (error) { ... }`
- **Clean code over workarounds** - Remove unnecessary code rather than trying to work around ESLint
- **Self-documenting code** - Method names, variable names, and structure should make intent obvious
- **No comments** - Good code should not need comments to explain what it does

### **‚ôüÔ∏è Chess Standards Compliance (CRITICAL)**

**Standard Chess Notation:**
- **Board Layout**: Rank 1 = positions 56-63 (white back rank), Rank 8 = positions 0-7 (black back rank)
- **Pawn Movement**: White moves "up" (-8 direction), Black moves "down" (+8 direction)
- **Starting Positions**: White pawns rank 2 (48-55), Black pawns rank 7 (8-15)
- **Square Mapping**: a1=56, h1=63, a8=0, h8=7

**Board Representation:**
```
Rank 8 (0-7):   ‚ôú‚ôû‚ôù‚ôõ‚ôö‚ôù‚ôû‚ôú  (a8-h8, Black back rank)
Rank 7 (8-15):  ‚ôü‚ôü‚ôü‚ôü‚ôü‚ôü‚ôü‚ôü  (a7-h7, Black pawns)
Rank 6 (16-23): ........  (empty)
Rank 5 (24-31): ........  (empty)
Rank 4 (32-39): ........  (empty)
Rank 3 (40-47): ........  (empty)
Rank 2 (48-55): ‚ôô‚ôô‚ôô‚ôô‚ôô‚ôô‚ôô‚ôô  (a2-h2, White pawns)
Rank 1 (56-63): ‚ôñ‚ôò‚ôó‚ôï‚ôî‚ôó‚ôò‚ôñ  (a1-h1, White back rank)
```

---

## üõ†Ô∏è **TECHNICAL STANDARDS (2025)**

### **JavaScript/ES2022**
```javascript
// ‚úÖ Modern class fields syntax with private fields
class ChessEngine {
    static PIECE_TYPES = ['pawn', 'rook', 'knight', 'bishop', 'queen', 'king'];

    // Private fields for encapsulation
    #privateField = 'value';
    #gameState;
    #currentPlayer = 'white';

    constructor() {
        this.#gameState = new GameState();
    }

    // Public getter methods for private fields
    getCurrentPlayer() { return this.#currentPlayer; }
    getGameState() { return this.#gameState; }
}

// ‚úÖ Comprehensive input validation with descriptive errors
function validateMove(fromIndex, toIndex) {
    if (typeof fromIndex !== 'number' || fromIndex < 0 || fromIndex >= 64) {
        throw new Error(`Invalid move: fromIndex ${fromIndex} must be 0-63`);
    }
    if (typeof toIndex !== 'number' || toIndex < 0 || toIndex >= 64) {
        throw new Error(`Invalid move: toIndex ${toIndex} must be 0-63`);
    }
}

// ‚úÖ Proper error handling
throw new Error(`Invalid move: ${details}`);  // Not console.warn()

// ‚úÖ Clean catch blocks - remove unused error parameters entirely
try {
    // risky operation
} catch {
    // handle error without needing error details
    return false;
}

// ‚úÖ Unused parameters
function processMove(_unused, toSquare) { /* ... */ }
```

### **Testing & Quality**
- **Jest Configuration** - ES modules with experimental VM support (NO deprecated flags)
- **ESLint & Prettier** - Synchronized flat config with `.prettierrc.json` and `eslint-config-prettier`
- **Error Handling** - Descriptive exceptions, no console pollution
- **Test Coverage** - All error paths and edge cases validated
- **Test Compatibility** - Update tests when implementing private fields or new APIs
- **Automated Linting** - Auto-fix workflow prevents CI failures from LLM code
- **üßπ Code Cleanliness** - Remove unused variables entirely, follow strict no-unused-vars rule

### **File Structure**
```
src/
‚îú‚îÄ‚îÄ core/          # Chess logic (Board, Piece, Game)
‚îÇ   ‚îú‚îÄ‚îÄ Board.js              # ‚úÖ Enhanced (Issue #15)
‚îÇ   ‚îú‚îÄ‚îÄ Piece.js              # ‚úÖ Implemented (ES2022 private fields)
‚îÇ   ‚îú‚îÄ‚îÄ Game.js               # ‚úÖ Implemented
‚îÇ   ‚îú‚îÄ‚îÄ GameState.js          # ‚úÖ Implemented
‚îÇ   ‚îú‚îÄ‚îÄ MoveGenerator.js      # ‚úÖ All pieces implemented
‚îÇ   ‚îú‚îÄ‚îÄ MoveValidator.js      # üîß FIXED - Enhanced integration + clean code
‚îÇ   ‚îî‚îÄ‚îÄ Rules.js              # ‚úÖ Basic implementation
‚îú‚îÄ‚îÄ ui/            # User interface (InputHandler, BoardRenderer)
‚îÇ   ‚îú‚îÄ‚îÄ BoardRenderer.js      # ‚úÖ Implemented
‚îÇ   ‚îú‚îÄ‚îÄ InputHandler.js       # ‚úÖ Implemented
‚îÇ   ‚îî‚îÄ‚îÄ styles.css            # ‚úÖ Implemented
‚îú‚îÄ‚îÄ ai/            # AI engine (Minimax, evaluation)
‚îÇ   ‚îî‚îÄ‚îÄ [TODO]                # Future implementation
‚îî‚îÄ‚îÄ utils/         # Utilities (Constants, helpers)
    ‚îî‚îÄ‚îÄ Constants.js          # ‚úÖ Implemented

tests/
‚îú‚îÄ‚îÄ core/          # Core logic tests
‚îÇ   ‚îú‚îÄ‚îÄ Board.test.js         # ‚úÖ Enhanced (Issue #15)
‚îÇ   ‚îú‚îÄ‚îÄ Piece.test.js         # ‚úÖ Implemented
‚îÇ   ‚îî‚îÄ‚îÄ MoveGenerator.test.js # ‚úÖ Implemented (All tests passing)
‚îú‚îÄ‚îÄ ui/            # UI component tests
‚îî‚îÄ‚îÄ ai/            # AI engine tests

.github/workflows/
‚îú‚îÄ‚îÄ auto-fix.yml              # ‚úÖ Automated LLM code quality fixes
‚îî‚îÄ‚îÄ ci.yml                    # ‚úÖ Main CI/CD pipeline

# Documentation Files
‚îú‚îÄ‚îÄ README.md                 # ‚úÖ Professional 16.9KB documentation
‚îú‚îÄ‚îÄ CONTRIBUTING.md           # ‚úÖ Comprehensive 10.7KB contributor guide
‚îú‚îÄ‚îÄ llms.txt                  # ‚úÖ LLM development guidelines
‚îî‚îÄ‚îÄ llms_project_context.txt  # ‚úÖ Current project status and priorities
```

---

## üîç **DEVELOPMENT BEST PRACTICES**

### **Issue Management**
- **Atomic Issues** - One specific problem per issue
- **Clear Definitions** - Detailed problem description and acceptance criteria
- **Priority Levels** - Critical ‚Üí High ‚Üí Medium ‚Üí Low
- **Progress Tracking** - Regular status updates and completion verification

### **Code Quality Gates**
1. **ESLint passes** without errors or warnings (auto-fixed if needed)
2. **All tests pass** with 100% success rate
3. **Error handling** uses exceptions, not console output
4. **Documentation** updated for significant changes
5. **Performance** considerations for LLM integration
6. **Test compatibility** verified when modifying core components
7. **Automated fixes** applied for LLM-generated code quality issues
8. **üßπ Clean code** - Remove unused variables entirely, follow strict ESLint rules

### **Integration Testing Protocol**
- **Dependency Mapping** - Before modifying core components, identify all dependent files
- **API Compatibility** - When changing public interfaces, update all consumers
- **Test Cascade** - Run tests for modified component AND all dependent components
- **Breaking Change Documentation** - Clearly document any API changes in commit messages

### **LLM Code Generation Best Practices**
- **Focus on Logic** - LLMs can focus on implementing functionality without worrying about minor linting
- **Trust Auto-Fix** - Let the automated workflow handle ESLint and Prettier issues
- **Verify Results** - Check that auto-fixes don't change intended logic
- **Quality Scripts** - Use `npm run quality:check` before major commits
- **üßπ Clean Code Principle** - Remove unused variables entirely instead of working around them

---

## ‚ôüÔ∏è **CHESS ENGINE SPECIFICS**

### **Core Features**
- **64-square board representation** with piece positioning ‚úÖ
- **Enhanced move tracking** with piece property updates ‚úÖ (Issue #15)
- **Move validation** with chess rule enforcement üîß **FIXED**
- **Game state tracking** including check/checkmate detection üîß **ENHANCED**
- **Move notation** for game recording and analysis (TODO)

### **Move Generation Status**
- **‚úÖ Pawn Moves**: Fully implemented with comprehensive testing
- **‚úÖ Rook Moves**: Fully implemented with comprehensive testing
- **‚úÖ Bishop Moves**: Fully implemented with comprehensive testing
- **‚úÖ Knight Moves**: Fully implemented with comprehensive testing
- **‚úÖ King Moves**: Fully implemented with comprehensive testing
- **‚úÖ Queen Moves**: Fully implemented with comprehensive testing

### **Enhanced Board Logic & Move Validation (UPDATED)**
- **‚úÖ Move Execution**: Enhanced movePiece method with detailed result tracking
- **‚úÖ Piece Tracking**: Automatic marking of moved pieces (crucial for castling/pawn rules)
- **‚úÖ Capture Detection**: Comprehensive capture identification and reporting
- **‚úÖ Game Integration Ready**: Method designed for Game class orchestration
- **üîß FIXED Move Validation**: Enhanced MoveValidator with robust integration
- **üîß FIXED Check Detection**: Improved algorithms with comprehensive error handling
- **üîß FIXED Checkmate/Stalemate**: Enhanced detection with proper legal move enumeration

### **AI Integration**
- **Position evaluation** for strategic decision making (TODO)
- **Move generation** with legal move filtering üîß **ENHANCED**
- **Search algorithms** optimized for performance (TODO)
- **LLM-friendly APIs** for external AI agent integration üîß **IMPROVED**

### **Performance Targets**
- **Sub-second move generation** for responsive gameplay
- **Memory efficient** board representation
- **Scalable architecture** for advanced AI features
- **Web Worker support** for non-blocking computation

---

## üöÄ **NEXT DEVELOPMENT PRIORITIES**

### **üéØ IMMEDIATE PRIORITY: Phase 3 - Core Game Logic (CONTINUING)**
**Status**: Enhanced Board Logic Complete ‚úÖ + MoveValidator Integration Fixed üîß ‚Üí Continuing Core Game Logic Phase

1. **Issue #14**: Orchestrate Game Flow with Game Class (**NEXT RECOMMENDED**)
2. **Advanced Move Validation**: Implement special moves (castling, en passant, promotion)
3. **Game State Management**: Complete turn management and game flow orchestration
4. **Integration Testing**: Comprehensive testing of all components working together

### **üß† Phase 4: AI & Advanced Features (Lower Priority)**
1. **AI Implementation**: Minimax with Alpha-Beta Pruning
2. **Advanced Rules**: Complete special moves implementation
3. **UI Enhancements**: Move highlighting, animations
4. **Performance**: Web Workers, transposition tables

### **üìä Current Progress Summary (CORRECTED)**
- **Phase 1 (Documentation)**: ‚úÖ **100% COMPLETE** (Issues #35-#38)
- **Phase 2 (Core Logic)**: ‚úÖ **100% COMPLETE** (All piece moves implemented)
- **Phase 3 (Game Rules)**: üîÑ **75% COMPLETE** (Issue #15 + MoveValidator fixes completed, continuing with Game orchestration)
- **Phase 4 (AI & Advanced)**: üìÖ **0% COMPLETE** (Future implementation)

---

## üîß **TROUBLESHOOTING QUICK REFERENCE**

### **Common Jest Issues**
```bash
# ‚ùå Error: node: bad option: --harmony-private-fields
# ‚úÖ Solution: Use modern Jest config (already fixed)
npm test

# ‚ùå Error: Cannot use import statement outside a module
# ‚úÖ Solution: Ensure "type": "module" in package.json (already set)
```

### **Common Test Failures**
```javascript
// ‚ùå Error: Cannot read private member #field
// ‚úÖ Solution: Use getter methods in tests
expect(piece.getType()).toBe('pawn');  // Not piece.type

// ‚ùå Error: Board wrapping validation
// ‚úÖ Solution: Use correct wrapping examples (already fixed)
```

### **Auto-Fix Workflow Issues**
```bash
# ‚ùå Error: Auto-fix workflow fails
# ‚úÖ Solution: Check workflow logs, ensure dependencies install correctly
# Auto-fix handles: ESLint errors, Prettier formatting, unused variables

# ‚ùå Error: Infinite loop in auto-fix
# ‚úÖ Solution: [auto-fix] tag in commit message prevents loops (already implemented)
```

### **ESLint Code Quality Issues (RESOLVED)**
```javascript
// üßπ BEST PRACTICE: Remove unused variables entirely
// ‚ùå WRONG: catch (error) { return false; }  // unused error parameter
// ‚ùå WRONG: catch (_error) { return false; } // still unused, just prefixed
// ‚úÖ CORRECT: catch { return false; }        // clean, no unused variables

// üßπ Follow project's strict .eslintrc.json no-unused-vars rule
// ‚úÖ Solution: Remove unnecessary code rather than working around ESLint
// ‚úÖ Solution: Use parameterless catch blocks when error details aren't needed
```

### **MoveValidator Integration Issues (RESOLVED)**
```javascript
// üîß FIXED: Enhanced error handling and integration
// ‚úÖ Solution: Comprehensive try-catch blocks and null safety checks
// ‚úÖ Solution: Robust MoveGenerator integration with error recovery
// ‚úÖ Solution: Enhanced checkmate/stalemate detection algorithms
// üßπ Solution: Clean code with unused variables removed entirely
```

### **Enhanced Move Object Structure (IMPLEMENTED)**
```javascript
// Enhanced move object format (implemented in Issue #15)
const moveResult = {
    from: 12,              // Source square index (0-63)
    to: 28,                // Destination square index
    pieceMoved: 'pawn',    // Moving piece type
    pieceCaptured: 'knight', // Captured piece type (if any, null otherwise)
    success: true          // Move execution status
};
```

---

## üìö **REFERENCE RESOURCES**

- **Technical Guide** - `llms.txt` (comprehensive development guidelines)
- **Issue Tracker** - GitHub Issues for all development tasks
- **CI/CD Pipeline** - GitHub Actions with automated testing and auto-fixing
- **Code Standards** - ESLint flat config with ES2022 support

**This context provides the essential framework for efficient development while maintaining the chess engine's core objectives and technical excellence.**